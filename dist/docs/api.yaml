openapi: 3.0.0
info:
  title: Todo API
  description: API for managing todos, user authentication, and smart scheduling
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: Users
    description: User authentication operations
  - name: Todos
    description: Todo operations
  - name: Utils
    description: Utility operations
paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Username already taken or missing required fields
        500:
          description: Internal Server Error
  /users/login:
    post:
      tags:
        - Users
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: Invalid credentials
        404:
          description: User not found
        500:
          description: Internal Server Error
  /todos:
    get:
      tags:
        - Todos
      summary: Get all todos
      security:
        - bearerAuth: []
      responses:
        200:
          description: Array of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        500:
          description: Internal Server Error
    post:
      tags:
        - Todos
      summary: Create a new todo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreate'
      responses:
        201:
          description: Created todo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        400:
          description: Invalid request body or dependencies not found
        500:
          description: Internal Server Error
  /todos/{id}:
    get:
      tags:
        - Todos
      summary: Get a todo by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Todo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        400:
          description: Invalid ID format
        404:
          description: Todo not found
        500:
          description: Internal Server Error
    patch:
      tags:
        - Todos
      summary: Update a todo by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoUpdate'
      responses:
        200:
          description: Updated todo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        400:
          description: Invalid request body or dependencies not found
        404:
          description: Todo not found
        500:
          description: Internal Server Error
    delete:
      tags:
        - Todos
      summary: Delete a todo by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Todo deleted
        400:
          description: Invalid ID format
        404:
          description: Todo not found
        500:
          description: Internal Server Error
  /utils/smart-schedule:
    get:
      tags:
        - Utils
      summary: Get a smart schedule for incomplete tasks
      security:
        - bearerAuth: []
      responses:
        200:
          description: Scheduled tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        500:
          description: Internal Server Error
components:
  schemas:
    Todo:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        deadline:
          type: string
          format: date-time
        importance:
          type: integer
          minimum: 1
          maximum: 5
        estimatedTime:
          type: integer
          minimum: 1
        dependencies:
          type: array
          items:
            type: string
        completed:
          type: boolean
    TodoCreate:
      type: object
      properties:
        title:
          type: string
          example: "Buy groceries"
        description:
          type: string
          example: "Need to buy milk, eggs, and bread"
        deadline:
          type: string
          format: date-time
          example: "2024-08-15T10:00:00Z"
        importance:
          type: integer
          minimum: 1
          maximum: 5
          example: 3
        estimatedTime:
          type: integer
          minimum: 1
          example: 2
        dependencies:
          type: array
          items:
            type: string
          example: ["60f5b4b4b6b8d90a06f47d19", "60f5b4b4b6b8d90a06f47d1a"]
        completed:
          type: boolean
          example: false
    TodoUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        deadline:
          type: string
          format: date-time
        importance:
          type: integer
          minimum: 1
          maximum: 5
        estimatedTime:
          type: integer
          minimum: 1
        dependencies:
          type: array
          items:
            type: string
        completed:
          type: boolean
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
